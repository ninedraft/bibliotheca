// Code generated by ent, DO NOT EDIT.

package book

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ninedraft/bibliotheca/storage/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// WrittenAt applies equality check predicate on the "written_at" field. It's identical to WrittenAtEQ.
func WrittenAt(v int64) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldWrittenAt, v))
}

// CoverID applies equality check predicate on the "cover_id" field. It's identical to CoverIDEQ.
func CoverID(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCoverID, v))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldFileID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldTitle, v))
}

// WrittenAtEQ applies the EQ predicate on the "written_at" field.
func WrittenAtEQ(v int64) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldWrittenAt, v))
}

// WrittenAtNEQ applies the NEQ predicate on the "written_at" field.
func WrittenAtNEQ(v int64) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldWrittenAt, v))
}

// WrittenAtIn applies the In predicate on the "written_at" field.
func WrittenAtIn(vs ...int64) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldWrittenAt, vs...))
}

// WrittenAtNotIn applies the NotIn predicate on the "written_at" field.
func WrittenAtNotIn(vs ...int64) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldWrittenAt, vs...))
}

// WrittenAtGT applies the GT predicate on the "written_at" field.
func WrittenAtGT(v int64) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldWrittenAt, v))
}

// WrittenAtGTE applies the GTE predicate on the "written_at" field.
func WrittenAtGTE(v int64) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldWrittenAt, v))
}

// WrittenAtLT applies the LT predicate on the "written_at" field.
func WrittenAtLT(v int64) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldWrittenAt, v))
}

// WrittenAtLTE applies the LTE predicate on the "written_at" field.
func WrittenAtLTE(v int64) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldWrittenAt, v))
}

// CoverIDEQ applies the EQ predicate on the "cover_id" field.
func CoverIDEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCoverID, v))
}

// CoverIDNEQ applies the NEQ predicate on the "cover_id" field.
func CoverIDNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldCoverID, v))
}

// CoverIDIn applies the In predicate on the "cover_id" field.
func CoverIDIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldCoverID, vs...))
}

// CoverIDNotIn applies the NotIn predicate on the "cover_id" field.
func CoverIDNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldCoverID, vs...))
}

// CoverIDGT applies the GT predicate on the "cover_id" field.
func CoverIDGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldCoverID, v))
}

// CoverIDGTE applies the GTE predicate on the "cover_id" field.
func CoverIDGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldCoverID, v))
}

// CoverIDLT applies the LT predicate on the "cover_id" field.
func CoverIDLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldCoverID, v))
}

// CoverIDLTE applies the LTE predicate on the "cover_id" field.
func CoverIDLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldCoverID, v))
}

// CoverIDContains applies the Contains predicate on the "cover_id" field.
func CoverIDContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldCoverID, v))
}

// CoverIDHasPrefix applies the HasPrefix predicate on the "cover_id" field.
func CoverIDHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldCoverID, v))
}

// CoverIDHasSuffix applies the HasSuffix predicate on the "cover_id" field.
func CoverIDHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldCoverID, v))
}

// CoverIDIsNil applies the IsNil predicate on the "cover_id" field.
func CoverIDIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldCoverID))
}

// CoverIDNotNil applies the NotNil predicate on the "cover_id" field.
func CoverIDNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldCoverID))
}

// CoverIDEqualFold applies the EqualFold predicate on the "cover_id" field.
func CoverIDEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldCoverID, v))
}

// CoverIDContainsFold applies the ContainsFold predicate on the "cover_id" field.
func CoverIDContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldCoverID, v))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldFileID, vs...))
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldFileID, v))
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldFileID, v))
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldFileID, v))
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldFileID, v))
}

// FileIDContains applies the Contains predicate on the "file_id" field.
func FileIDContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldFileID, v))
}

// FileIDHasPrefix applies the HasPrefix predicate on the "file_id" field.
func FileIDHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldFileID, v))
}

// FileIDHasSuffix applies the HasSuffix predicate on the "file_id" field.
func FileIDHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldFileID, v))
}

// FileIDIsNil applies the IsNil predicate on the "file_id" field.
func FileIDIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldFileID))
}

// FileIDNotNil applies the NotNil predicate on the "file_id" field.
func FileIDNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldFileID))
}

// FileIDEqualFold applies the EqualFold predicate on the "file_id" field.
func FileIDEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldFileID, v))
}

// FileIDContainsFold applies the ContainsFold predicate on the "file_id" field.
func FileIDContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldFileID, v))
}

// HasAuthors applies the HasEdge predicate on the "authors" edge.
func HasAuthors() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AuthorsTable, AuthorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorsWith applies the HasEdge predicate on the "authors" edge with a given conditions (other predicates).
func HasAuthorsWith(preds ...predicate.Author) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := newAuthorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Book) predicate.Book {
	return predicate.Book(sql.NotPredicates(p))
}
